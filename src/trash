def find_dir(self):

    frame = self.im

    if frame is None: return True
        # Every color except white

    hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
    mask = cv.inRange(hsv, self.lower_hsv, self.higher_hsv)
    result = cv.bitwise_and(frame, frame, mask=mask)
    fgmask = self.fgbg.apply(result)
    
    _, th1 = cv.threshold(result, 30, 255 , cv.THRESH_BINARY)
    gray = cv.cvtColor(th1, cv.COLOR_BGR2GRAY)

    # Find outer contours
    image, cnts, hierarchy = cv.findContours(gray, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    
    
    counters = np.array(cnts)
    max_area = 10
    maxc = np.empty([1])
    
    for contour in cnts:
        a = cv.contourArea(contour) #area of corent contur
        if a > max_area:
            #max_area = a
            maxc = contour
    
    if not maxc.all():return False

    M = cv.moments(maxc)
    cX , cY = int(M["m10"] / M["m00"]) , int(M["m01"] / M["m00"])
    c = np.array(maxc)
    # determine the most extreme points along the contour
    if np.ndim(c)!= 3:
        return False
    
    extBot = tuple(c[c[:, :, 1].argmax()][0])

    X2b ,X2c = np.array(extBot),np.array([cX, cY])

    if self.check: self.X1b , self.X1c ,self.check  = X2b , X2c ,False

    di = np.sqrt(np.sum(np.power(X2b-self.X1b, 2)))

    #if di <= self.deltaX and di != 0: self.X1b , self.X1c  = X2b  , X2c

    if  di != 0: self.X1b , self.X1c  = X2b  , X2c

    Xb ,Xc = tuple(self.X1b.reshape(1, -1)[0]) , tuple(self.X1c.reshape(1, -1)[0])


    #fit line to conts

    rows,cols = frame.shape[:2]
    [vx,vy,x,y] = cv.fitLine(maxc, cv.DIST_L2 ,0,0.01,0.01)
    lefty = int((-x*vy/vx) + y)
    righty = int(((cols-x)*vy/vx)+y)
    cv.line(frame,(cols-1,righty),(0,lefty),(0,255,0),2)

    cv.drawContours(gray, maxc, -1, (255 ,0, 0), 2)
    cv.arrowedLine(gray, Xb, Xc, (0, 255, 0), 2, tipLength=0.2)
    cv.circle(gray, Xc, 10, (0, 255, 255), -1)
    cv.circle(gray, Xb, 3, (0, 255, 255), -1)
    #cv.line(gray,(0,0), (640,480), 1, thickness=3, lineType=8, shift=0)
    #cv.line(gray,(640,0), (0,480), 1, thickness=3, lineType=8, shift=0)
    cv.imshow("Arrow", frame)
    
    key = cv.waitKey(30)

    if key == 'q' or key == 27: return True

    slope = X2c - X2b
    self.theta = np.arctan2(slope[1],slope[0])
    u = np.cos(self.theta)*self.V
    v =np.sin(self.theta)*self.V
    self.twist.linear.x = -v; self.twist.linear.y = -u
    self.pub.publish(self.twist)
    return False
